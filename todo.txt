Project:
-[X] Create and bind a DepthBuffer. Make sure it is depth-reversed.
-[X] Implement instanced rendering of cubes via MeshSystem singleton using a normal visualization shader. Load instance matrices into InstanceBuffer. Use IndexBuffer as well.
-[X] Load 3D models from provided FBX files using Assimp library. Implement a ModelManager singleton: it returns a shared_ptr to a Model by a given filename string; it loads a Model only if it wasn’t loaded earlier, otherwise returns an existing instance; use std::unordered_map to find loaded Models. Apply the Hologram effects provided in hints to the loaded Models
-[X] Enable Camera navigation
-[ ] Enable mesh instance dragging (request MeshSystem to find intersections).
-[X] Modify the Hologram shaders so the effect is calculated relatively to mesh instance positions and not WorldSpace origin
-[X] Modify the Hologram shaders so Hologram colors can be assigned per-instance (one is cyan, another is green, etc.).

Code:
-[X] Instead of having a Scene now you should have a MeshSystem storing and rendering meshes.
-[X] Put rendering pipeline code (calling D3D::update, setting RTVs, clearing, calling MeshSystem::render) into Engine’s Render(er) class, which determines the way the scene is rendered
-[X] ModelManager and MeshSystem singletones are inited in Engine::init().